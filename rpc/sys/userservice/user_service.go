// Code generated by goctl. DO NOT EDIT.
// Source: sys.proto

package userservice

import (
	"context"

	"zero-fox-admin/rpc/sys/sysclient"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	InfoReq           = sysclient.InfoReq
	InfoResp          = sysclient.InfoResp
	LoginReq          = sysclient.LoginReq
	LoginResp         = sysclient.LoginResp
	MenuListTree      = sysclient.MenuListTree
	ReSetPasswordReq  = sysclient.ReSetPasswordReq
	ReSetPasswordResp = sysclient.ReSetPasswordResp
	UserAddReq        = sysclient.UserAddReq
	UserAddResp       = sysclient.UserAddResp
	UserDeleteReq     = sysclient.UserDeleteReq
	UserDeleteResp    = sysclient.UserDeleteResp
	UserListData      = sysclient.UserListData
	UserListReq       = sysclient.UserListReq
	UserListResp      = sysclient.UserListResp
	UserStatusReq     = sysclient.UserStatusReq
	UserStatusResp    = sysclient.UserStatusResp
	UserUpdateReq     = sysclient.UserUpdateReq
	UserUpdateResp    = sysclient.UserUpdateResp

	UserService interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
		UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error)
		UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error)
		UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error)
		UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error)
		ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...grpc.CallOption) (*ReSetPasswordResp, error)
		UpdateUserStatus(ctx context.Context, in *UserStatusReq, opts ...grpc.CallOption) (*UserStatusResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}

func (m *defaultUserService) UserAdd(ctx context.Context, in *UserAddReq, opts ...grpc.CallOption) (*UserAddResp, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserAdd(ctx, in, opts...)
}

func (m *defaultUserService) UserList(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserList(ctx, in, opts...)
}

func (m *defaultUserService) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

func (m *defaultUserService) UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UserDelete(ctx, in, opts...)
}

func (m *defaultUserService) ReSetPassword(ctx context.Context, in *ReSetPasswordReq, opts ...grpc.CallOption) (*ReSetPasswordResp, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.ReSetPassword(ctx, in, opts...)
}

func (m *defaultUserService) UpdateUserStatus(ctx context.Context, in *UserStatusReq, opts ...grpc.CallOption) (*UserStatusResp, error) {
	client := sysclient.NewUserServiceClient(m.cli.Conn())
	return client.UpdateUserStatus(ctx, in, opts...)
}
